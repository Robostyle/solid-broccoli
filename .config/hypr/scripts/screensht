#!/bin/bash

set -o pipefail

# Directory
_SCREENSHOT_DIR_=$HOME/Pictures/Screenshots
_ORIGINAL_DIR_=$_SCREENSHOT_DIR_/Original
_LOG_FILE_="$_SCREENSHOT_DIR_/.screensht.log"

function check() {
	echo "Check $? ${PIPESTATUS[0]}"
	if [[ $? -eq 1 && ${PIPESTATUS[0]} -eq 1 ]]; then
		_end_job_=$(date +%s)
		summary $_start_job_ $_end_job_ 'failed' && notify-send -u critical -t 3000 -a "Screenshot Tool" "Screensht" >>$_LOG_FILE_ 2>&1
		exit 1
	fi
}

# Check save directory
# Create it if it doesn't exist
function check_dir() {
	if [[ ! -d "$_SCREENSHOT_DIR_" || ! -d "$_ORIGINAL_DIR_" ]]; then
		mkdir -p "$_SCREENSHOT_DIR_"
		mkdir -p "$_ORIGINAL_DIR_"
	fi
}

function get_latest_img() {
	_LATEST_IMAGE_=$(/bin/ls -th $_SCREENSHOT_DIR_ | grep -vE '.screensht.png$' | grep -E '.png$' | head -n 1)

	if [[ $(echo "$_LATEST_IMAGE_" | wc -w) -eq 0 ]]; then
		exit 1
	else
		_LATEST_IMAGE_="$_SCREENSHOT_DIR_/$_LATEST_IMAGE_"
	fi
}

function convert() {
	_target_file_=$(echo "$_LATEST_IMAGE_" | sed 's/.png/.screensht.png/g')

	magick convert "$_LATEST_IMAGE_" \
		\( +clone -alpha extract -virtual-pixel black -spread 10 -blur 0x3 -threshold 50% -spread 1 -blur 0x.7 \) \
		-alpha off \
		-compose Copy_Opacity \
		-composite "$_target_file_" >>$_LOG_FILE_ 2>&1
	check
}

function summary() {
	_runtime_job_=$(($2 - $1))
	hours=$((_runtime_job_ / 3600))
	minutes=$(((_runtime_job_ % 3600) / 60))
	seconds=$(((_runtime_job_ % 3600) % 60))

	echo "---- $_target_file_"
	if [[ $3 != "failed" ]]; then
		wl-copy <"$_target_file_" >>$_LOG_FILE_ 2>&1

		message="${_notif_message_} Runtime: $hours hours, $minutes minutes, $seconds seconds"
		echo "$_target_file_"
		notify-send -i "$_target_file_" -t 10000 "$message" -a "Screenshot Tool"
	fi
}

function main() {
	check_dir

	rm -f $_LOG_FILE_
	_start_job_=$(date +%s)

	_screenshot_command_="$1"
	_notif_message_="$2"

	$_screenshot_command_ $_SCREENSHOT_DIR_\/$_start_job_.png >/dev/null 2>&1
	check

	get_latest_img
	convert

	mv $_LATEST_IMAGE_ $_ORIGINAL_DIR_

	_end_job_=$(date +%s)
	summary $_start_job_ $_end_job_
}

# Check the args passed
if [ -z "$1" ] || ([ "$1" != 'full' ] && [ "$1" != 'area' ]); then
	echo "
	Requires an argument:
	area 	- Area screenshot
	full 	- Fullscreen screenshot
	Example:
	./screensht area
	./screensht full
	"
elif [ "$1" = 'full' ]; then
	msg="Full screenshot saved and copied to clipboard!"
	main 'grimblast copysave output' "${msg}"
elif [ "$1" = 'area' ]; then
	msg='Area screenshot saved and copied to clipboard!'
	main 'grimblast copysave area' "${msg}"
fi
