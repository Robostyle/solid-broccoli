#!/bin/zsh

local valid_configs=(
    fuzzel
    hypr
    mako
    nvim
    starship
    swaylock
    waybar
    wezterm
    wlogout
    zsh
)

function usage ()
{
    print -C1 \
        "Sync dotfiles from or to git managed folder.\n"  \
        "$0 [-h|--help]"  \
        "$0 [-t|--to-config]   [-c|--configs] sync local selected config to $\HOME/.config"  \
        "$0 [-f|--from-config] [-c|--configs] sync from $\HOME/.config to git stored config\n" \
        "$0 [-l|--local_scripts] sync from .local/bin as well\n" \
        "This syncs config from this git folder to \$HOME/.config or from \$HOME/.config" \
        "to this git folder. The 'configs' argument can be 'all', or one or more of the" \
        "following options separated by commas.\n"

        for key in ${valid_configs}; do
            echo "\t - $key"
        done

        exit 1
}

local help to_config from_config binfiles configs=(all)

function parse_options () {
    zmodload zsh/zutil

    zparseopts -D -F -K -- \
        {h,-help}=help       \
        {t,-to-config}=to_config \
        {f,-from-config}=from_config \
        {l,-local-scripts}=binfiles \
        {c,-configs}:=configs || usage

    if (( $#help )); then
        usage
    fi

    if [ $#from_config -eq 0 ] && [ $#to_config -eq 0 ]; then
        usage
    fi
}

function get_config_list () {
    local parts=()
    if [[ "$configs" == "all" ]]; then
        echo syncing all: $valid_configs

        parts=(${valid_configs})
    else
        parts=(${(@s:,:)configs[-1]})

        for part in $parts; do
            if [[ $valid_configs[(Ie)$part] -eq 0 ]]; then
                echo "Config '$part' not found in valid configs!"
                exit -1
            fi
        done
    fi

    echo "${parts}"
}


parse_options $*


local git_folder="${0:a:h}"
local git_config_folder="$git_folder/config"
local git_bin_folder="$git_folder/scripts"
local local_config_folder="$HOME/.config"


if (( $#to_config )); then
    echo "Sync to ${local_config_folder}"

    local parts=($(get_config_list))

    if [[ "$configs" == "all" ]]; then
        print -n "You selected to sync all configuration to .config,\n" \
            "Shall we make a backup before syncing to ${local_config_folder} "

        if read -q "choice?[y/n] "; then
            local date=$(date +%d.%m.%y-%H:%M)

            # mkdir -p ${date}

            print "\nparts: ${parts}"

        else
            echo "No"
        fi
    else
        echo "syncing: ${parts}"
    fi

    for part in $parts; do
        echo "- syncing $part"

        rsync -a --delete "${git_config_folder}/$part" "$HOME/.config"

        if [[ "$part" == "zsh" ]]; then
            # also sync .zshenv for zsh
            cp "${git_config_folder}/zshenv" "$HOME/.zshenv"
        fi
    done

    if (( $#binfiles )); then
        echo "syncing script files"
        rsync -a "${git_bin_folder}" "$HOME/.local/bin" 
    fi
fi

if (( $#from_config )); then
    echo "Sync from ${local_config_folder}"

    if [[ "$configs" == "all" ]]; then
        echo syncing all: $valid_configs

        parts=(${valid_configs})
    else
        parts=(${(@s:,:)configs[-1]})

        for part in $parts; do
            if [[ $valid_configs[(Ie)$part] -eq 0 ]]; then
                echo "Config '$part' not found in valid configs!"
                exit -1
            fi
        done
    fi

    for part in $parts; do
        echo "- syncing $part"

        rsync -a --delete "$HOME/.config/$part" "${git_config_folder}"

        if [[ "$part" == "zsh" ]]; then
            # also sync .zshenv for zsh
            cp "$HOME/.zshenv" "${git_config_folder}/zshenv"
        fi
    done

    if (( $#binfiles )); then
        echo "syncing script files"
        rsync -a "$HOME/.local/bin" "${git_bin_folder}"
    fi
fi

